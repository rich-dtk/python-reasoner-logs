Or(apps_created(default), Not(DYNAMIC_ATTRIBUTE-2))

Or(apps_created(default), Not(DYNAMIC_ATTRIBUTE-3))

Or(Not(RULE-4),
   ForAll(?sts,
          (If(has_key(labels(?sts),
                      app.kubernetes.io/managed-by),
              value(labels(?sts),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?sts)))

Or(Not(RULE-5),
   ForAll(?sts,
          _managed_by_helm_helper(?sts,
                                  If(managed_by_helm(?sts),
                                     True,
                                     False))))

Or(Not(RULE-6),
   ForAll(?deployment,
          (If(has_key(labels(?deployment),
                      app.kubernetes.io/managed-by),
              value(labels(?deployment),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?deployment)))

Or(Not(RULE-7),
   ForAll(?deployment,
          _managed_by_helm_helper(?deployment,
                                  If(managed_by_helm(?deployment),
                                     True,
                                     False))))

Or(Not(RULE-8),
   ForAll(?service,
          (If(has_key(labels(?service),
                      app.kubernetes.io/managed-by),
              value(labels(?service),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?service)))

Or(Not(RULE-9),
   ForAll(?service,
          _managed_by_helm_helper(?service,
                                  If(managed_by_helm(?service),
                                     True,
                                     False))))

Or(Not(RULE-10),
   ForAll(?kube.ingress,
          (If(has_key(labels(?kube.ingress),
                      app.kubernetes.io/managed-by),
              value(labels(?kube.ingress),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?kube.ingress)))

Or(Not(RULE-11),
   ForAll(?kube.ingress,
          _managed_by_helm_helper(?kube.ingress,
                                  If(managed_by_helm(?kube.ingress),
                                     True,
                                     False))))

Or(Not(RULE-12),
   ForAll(?service,
          (If(has_key(labels(?service),
                      app.kubernetes.io/managed-by),
              value(labels(?service),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?service)))

Or(Not(RULE-13),
   ForAll(?service,
          _managed_by_helm_helper(?service,
                                  If(managed_by_helm(?service),
                                     True,
                                     False))))

Or(Not(RULE-14),
   ForAll(?kube.ingress,
          (If(has_key(labels(?kube.ingress),
                      app.kubernetes.io/managed-by),
              value(labels(?kube.ingress),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?kube.ingress)))

Or(Not(RULE-15),
   ForAll(?kube.ingress,
          _managed_by_helm_helper(?kube.ingress,
                                  If(managed_by_helm(?kube.ingress),
                                     True,
                                     False))))

Or(Not(RULE-16),
   ForAll(?kube.secret,
          (If(has_key(labels(?kube.secret),
                      app.kubernetes.io/managed-by),
              value(labels(?kube.secret),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?kube.secret)))

Or(Not(RULE-17),
   ForAll(?kube.secret,
          _managed_by_helm_helper(?kube.secret,
                                  If(managed_by_helm(?kube.secret),
                                     True,
                                     False))))

Or(Not(RULE-18),
   ForAll(?kube.ingress.class,
          (If(has_key(labels(?kube.ingress.class),
                      app.kubernetes.io/managed-by),
              value(labels(?kube.ingress.class),
                    app.kubernetes.io/managed-by),
              no_match_value) ==
           Helm) ==
          managed_by_helm(?kube.ingress.class)))

Or(Not(RULE-19),
   ForAll(?kube.ingress.class,
          _managed_by_helm_helper(?kube.ingress.class,
                                  If(managed_by_helm(?kube.ingress.class),
                                     True,
                                     False))))

Or(Not(RULE-20),
   ForAll([?kube.namespace-1, ?kube.namespace-2],
          matching_namespace(?kube.namespace-1,
                             ?kube.namespace-2) ==
          And(Not(?kube.namespace-1 == COMMON.NONE),
              ?kube.namespace-1 == ?kube.namespace-2)))

Or(Not(RULE-21),
   ForAll([?service, ?service_port],
          Or(Not(ports(?service, ?service_port)),
             cross_namespace_endpoints(?service_port,
                                       name(?service),
                                       namespace(?service),
                                       cluster_domain_name(kube_cluster(manifest_set(?service))),
                                       target_port(?service_port)))))

Or(Not(RULE-22),
   ForAll([?service_port,
           ?kube.name,
           ?kube.namespace,
           ?kubecluster.domainname,
           ?port],
          Or(Not(cross_namespace_endpoints(?service_port,
                                        ?kube.name,
                                        ?kube.namespace,
                                        ?kubecluster.domainname,
                                        ?port)),
             debug_cross_namespace_endpoints_user(?service_port,
                                        ?kube.name))))

Or(Not(RULE-23),
   ForAll(?service_port,
          target_port(?service_port) ==
          debug_target_port(?service_port)))

Or(Not(RULE-24),
   ForAll([?service_port, ?kube.container.portitem],
          Or(Not(And(connects_through_service(?kube.container.portitem,
                                        service(?service_port)),
                     Or(And(Not(container_port(?kube.container.portitem) ==
                                COMMON.NONE),
                            conditionally_cast_to_port_number(If(target_port(?service_port) ==
                                        COMMON.NONE,
                                        cast_to_port(port(?service_port)),
                                        target_port(?service_port))) ==
                            container_port(?kube.container.portitem)),
                        And(Not(name(?kube.container.portitem) ==
                                COMMON.NONE),
                            If(target_port(?service_port) ==
                               COMMON.NONE,
                               cast_to_port(port(?service_port)),
                               target_port(?service_port)) ==
                            name(?kube.container.portitem))))),
             matching_network_port_number(?kube.container.portitem,
                                        ?service_port) ==
             container_port(?kube.container.portitem))))

Or(Not(RULE-25),
   ForAll(?container,
          container_image(image(?container)) ==
          container_image(?container)))

Or(_EMatch.marked(getdtk/graph-example1-app:latest),
   Not(RULE-26))

Or(Not(RULE-29),
   container_image(getdtk/graph-example1-app) ==
   getdtk/graph-example1-app:latest)

Or(_EMatch.marked(getdtk/graph-example2-app:latest),
   Not(RULE-30))

Or(Not(RULE-33),
   container_image(getdtk/graph-example2-app) ==
   getdtk/graph-example2-app:latest)

Or(_EMatch.marked(docker.io/bitnami/redis:6.2.4-debian-10-r13),
   Not(RULE-34))

Or(Not(RULE-37),
   container_image(docker.io/bitnami/redis:6.2.4-debian-10-r13) ==
   docker.io/bitnami/redis:6.2.4-debian-10-r13)

Or(Not(RULE-38),
   ForAll([?deployment, ?service],
          Or(Not(And(namespace(?deployment) ==
                     namespace(?service),
                     service_label_match(?deployment,
                                        ?service))),
             connected_by_service(?deployment, ?service))))

Or(Not(RULE-39),
   ForAll([?sts, ?service],
          Or(Not(And(namespace(?sts) == namespace(?service),
                     service_label_match(?sts, ?service))),
             connected_by_service(?sts, ?service))))

Or(Not(RULE-40),
   ForAll([?service, ?container, ?kube.container.portitem],
          Or(Not(And(connected_by_service(?container,
                                        ?service),
                     Kube.Container.ports(?container,
                                        ?kube.container.portitem))),
             connects_through_service(?kube.container.portitem,
                                      ?service))))

Or(Not(RULE-41),
   ForAll([?kube.container.envvars,
           ?kube.container.envvarname,
           ?kube.secret],
          Or(Not(name(?kube.secret) ==
                 referenced_secret_name(?kube.container.envvars,
                                        ?kube.container.envvarname)),
             linked_kube_secret(?kube.container.envvars,
                                ?kube.container.envvarname,
                                ?kube.secret))))

Or(Not(RULE-42),
   ForAll([?kube.container.envvars,
           ?kube.container.envvarname,
           ?kube.secret],
          Or(Not(linked_kube_secret(?kube.container.envvars,
                                    ?kube.container.envvarname,
                                    ?kube.secret)),
             And(secret_value(?kube.container.envvars,
                              ?kube.container.envvarname) ==
                 secret_value(keys(?kube.secret),
                              referenced_secret_key(?kube.container.envvars,
                                        ?kube.container.envvarname)),
                 _meta_attr_fn__secret_value__c__Any.Secret(?kube.container.envvars,
                                        ?kube.container.envvarname) ==
                 keys(?kube.secret),
                 _meta_attr_fn__secret_value__a__Any.Secret(?kube.container.envvars,
                                        ?kube.container.envvarname) ==
                 secret_value,
                 _meta_attr_fn__secret_value__k__Any.Secret(?kube.container.envvars,
                                        ?kube.container.envvarname) ==
                 referenced_secret_key(?kube.container.envvars,
                                       ?kube.container.envvarname)))))

Or(Not(RULE-43),
   ForAll(?kube.ingress.class,
          (If(has_key(annotations(?kube.ingress.class),
                      ingressclass.kubernetes.io/is-default-class),
              value(annotations(?kube.ingress.class),
                    ingressclass.kubernetes.io/is-default-class),
              no_match_value) ==
           true) ==
          is_default_class(?kube.ingress.class)))

Or(Not(RULE-44),
   ForAll([?kube.ingress, ?kube.ingress.class],
          Or(Not(ingress_class_name(?kube.ingress) ==
                 name(?kube.ingress.class)),
             _partial_matching_ingress_class(?kube.ingress) ==
             ?kube.ingress.class)))

Or(Not(RULE-45),
   ForAll(?kube.ingress.class,
          Not(is_default_class(?kube.ingress.class) ==
              is_not_default_class(?kube.ingress.class))))

Or(Not(RULE-46),
   ForAll(?kube.ingress.rule.httppath.backend,
          Or(host_pattern_link(?kube.ingress.rule.httppath.backend) ==
             host_pattern(_parent.Kube.Ingress.Rule(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend))),
             host(_parent.Kube.Ingress.Rule(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend))) ==
             COMMON.NONE)))

Or(_EMatch.marked(KubernetesParser.Kube.Ingress-2/default_backend),
   Not(RULE-49))

Or(Not(RULE-50),
   default_backend(KubernetesParser.Kube.Ingress-2) ==
   KubernetesParser.Kube.Ingress-2/default_backend)

Or(_shadow_component(KubernetesParser.Kube.Ingress-2/default_backend),
   Not(RULE-51))

Or(Not(RULE-53),
   ForAll([?kube.ingress.rule.httppath.backend, ?service],
          Or(Not(And(name(?service) ==
                     name(service(?kube.ingress.rule.httppath.backend)),
                     namespace(?service) ==
                     namespace(_parent.Kube.Ingress(_parent.Kube.Ingress.Rule(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend)))))),
             _matching_kube_service(?kube.ingress.rule.httppath.backend,
                                    ?service))))

Or(Not(RULE-54),
   ForAll([?kube.ingress.defaultbackend, ?service],
          Or(Not(And(name(?service) ==
                     name(service(?kube.ingress.defaultbackend)),
                     namespace(?service) ==
                     namespace(parent(?kube.ingress.defaultbackend)))),
             _matching_kube_service(?kube.ingress.defaultbackend,
                                    ?service))))

Or(Not(RULE-55),
   ForAll(?kube.ingress.rule.httppath.backend,
          Or(host_pattern_link(?kube.ingress.rule.httppath.backend) ==
             host_pattern(_parent.Kube.Ingress.Rule(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend))),
             host(_parent.Kube.Ingress.Rule(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend))) ==
             COMMON.NONE)))

Or(Not(RULE-56),
   ForAll(?kube.ingress,
          rewrite_target(?kube.ingress,
                         If(has_key(annotations(?kube.ingress),
                                    nginx.ingress.kubernetes.io/rewrite-target),
                            value(annotations(?kube.ingress),
                                  nginx.ingress.kubernetes.io/rewrite-target),
                            no_match_value))))

Or(Not(RULE-57),
   ForAll(?kube.ingress.rule.httppath.backend,
          path_pattern(network_topology_http_route(?kube.ingress.rule.httppath.backend)) ==
          path(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend))))

Or(Not(RULE-58),
   ForAll(?kube.ingress.rule.httppath.backend,
          host_pattern(network_topology_http_route(?kube.ingress.rule.httppath.backend)) ==
          If(host(_parent.Kube.Ingress.Rule(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend))) ==
             COMMON.NONE,
             *,
             host(_parent.Kube.Ingress.Rule(_parent.Kube.Ingress.Rule.HttpPath(?kube.ingress.rule.httppath.backend))))))

Or(Not(RULE-59),
   ForAll([?app.kubeingresscontroller, ?kube.ingress],
          Or(Not(watch_ingress_without_class(params(?app.kubeingresscontroller))),
             _kube_ingress_modal(?app.kubeingresscontroller,
                                 ?kube.ingress,
                                 DoesHold))))

Or(Not(RULE-60),
   ForAll([?app.kubeingresscontroller,
           ?kube.ingress,
           ?kube.ingress.class],
          Or(Not(And(kube_ingress_class(?app.kubeingresscontroller,
                                        ?kube.ingress.class),
                     ingress_class(?kube.ingress) ==
                     ?kube.ingress.class)),
             _kube_ingress_modal(?app.kubeingresscontroller,
                                 ?kube.ingress,
                                 DoesHold))))

Or(Not(RULE-61),
   ForAll([?app.kubeingresscontroller, ?kube.ingress.class],
          Or(Not(controller_class(params(?app.kubeingresscontroller)) ==
                 controller(?kube.ingress.class)),
             kube_ingress_class(?app.kubeingresscontroller,
                                ?kube.ingress.class))))

Or(Not(RULE-62),
   ForAll(?sts,
          And(stable_network_id_url(?sts) ==
              url(stable_network_id(?sts)),
              _meta_attr_fn__stable_network_id_url__c__Any.String(?sts) ==
              stable_network_id(?sts),
              _meta_attr_fn__stable_network_id_url__a__Any.String(?sts) ==
              url)))

Or(_EMatch.marked(HelmParser.Kube.StatefulSet-0/stable_network_id),
   Not(RULE-63))

Or(Not(RULE-64),
   stable_network_id(HelmParser.Kube.StatefulSet-0) ==
   HelmParser.Kube.StatefulSet-0/stable_network_id)

Or(_EMatch.marked(HelmParser.Kube.StatefulSet-1/stable_network_id),
   Not(RULE-70))

Or(Not(RULE-71),
   stable_network_id(HelmParser.Kube.StatefulSet-1) ==
   HelmParser.Kube.StatefulSet-1/stable_network_id)

Or(Not(RULE-77),
   ForAll([?kube.stablenetworkref, ?kube.stablenetworkid],
          Or(Not(matches_network_id(?kube.stablenetworkref,
                                    ?kube.stablenetworkid)),
             And(hostname(?kube.stablenetworkref) ==
                 hostname(?kube.stablenetworkid),
                 Not(replica_count(?kube.stablenetworkid) +
                     -1*index(?kube.stablenetworkref) <=
                     0),
                 service(?kube.stablenetworkref) ==
                 service(?kube.stablenetworkid),
                 namespace(?kube.stablenetworkref) ==
                 namespace(?kube.stablenetworkid),
                 cluster_domain_name(?kube.stablenetworkref) ==
                 cluster_domain_name(?kube.stablenetworkid)))))

Or(Not(RULE-78),
   ForAll([?kube.stablenetworkref, ?kube.stablenetworkid],
          Not((replica_count(?kube.stablenetworkid) +
               -1*index(?kube.stablenetworkref) <=
               0) ==
              debug_matches_network_id(?kube.stablenetworkref,
                                       ?kube.stablenetworkid))))

Or(Not(RULE-79),
   ForAll(?config.manifestset.instantiation,
          kube_cluster_domain_name(?config.manifestset.instantiation) ==
          cluster_domain_name(kube_cluster(?config.manifestset.instantiation))))

Or(Not(RULE-80),
   ForAll([?slave_app.redis,
           ?master_app.redis,
           ?app.redis.cluster],
          Or(Not(And(redis_replication_mode(params(?slave_app.redis)) ==
                     slave,
                     redis_replication_mode(params(?master_app.redis)) ==
                     master,
                     slave_replicas(?app.redis.cluster,
                                    ?slave_app.redis),
                     master(?app.redis.cluster,
                            ?master_app.redis))),
             connects_to_master(?slave_app.redis,
                                ?master_app.redis,
                                ShouldHold))))

Or(Not(RULE-81),
   ForAll([?slave_app.redis, ?master_app.redis],
          Or(Not(And(connects_to_master(?slave_app.redis,
                                        ?master_app.redis,
                                        ShouldHold),
                     Not(connects_to_master(?slave_app.redis,
                                        ?master_app.redis,
                                        DoesHold)))),
             connects_to_master_violation(?slave_app.redis,
                                        ?master_app.redis))))

Or(Not(RULE-82),
   ForAll([?slave_app.redis, ?master_app.redis],
          Or(Not(connects_to_master(?slave_app.redis,
                                    ?master_app.redis,
                                    DoesHold)),
             And(redis_master_port(params(?slave_app.redis)) ==
                 redis_port_number(params(?master_app.redis)),
                 matches_network_id(redis_master_stable_network_ref(?slave_app.redis),
                                    stable_network_id_on_master(?master_app.redis))))))

_parent.Kube.Workload(KubernetesParser.Kube.Deployment-0) ==
KubernetesParser.Kube.Deployment-0

_parent.Kube.Workload(KubernetesParser.Kube.Deployment-1) ==
KubernetesParser.Kube.Deployment-1

_parent.Kube.Workload(HelmParser.Kube.StatefulSet-0) ==
HelmParser.Kube.StatefulSet-0

_parent.Kube.Workload(HelmParser.Kube.StatefulSet-1) ==
HelmParser.Kube.StatefulSet-1


label_subset(HelmParser.Kube.Service-0,
             HelmParser.Kube.StatefulSet-0)

label_subset(HelmParser.Kube.Service-1,
             HelmParser.Kube.StatefulSet-0)

label_subset(HelmParser.Kube.Service-0,
             HelmParser.Kube.StatefulSet-1)

label_subset(HelmParser.Kube.Service-2,
             HelmParser.Kube.StatefulSet-1)

label_subset(KubernetesParser.Kube.Service-0,
             KubernetesParser.Kube.Deployment-0)

service_label_match(HelmParser.Kube.StatefulSet-0,
                    HelmParser.Kube.Service-0)

service_label_match(HelmParser.Kube.StatefulSet-0,
                    HelmParser.Kube.Service-1)

service_label_match(HelmParser.Kube.StatefulSet-1,
                    HelmParser.Kube.Service-0)

service_label_match(HelmParser.Kube.StatefulSet-1,
                    HelmParser.Kube.Service-2)

service_label_match(KubernetesParser.Kube.Deployment-0,
                    KubernetesParser.Kube.Service-0)


Or(ingress_class(KubernetesParser.Kube.Ingress-1) ==
   ShadowIngressClass)

Or(ingress_class(KubernetesParser.Kube.Ingress-0) ==
   ShadowIngressClass)

Or(ingress_class(KubernetesParser.Kube.Ingress-2) ==
   ShadowIngressClass)


KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service !=
KubernetesParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service !=
HelmParser.Kube.Service-2

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service !=
HelmParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service !=
KubernetesParser.Kube.Service-1

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service !=
HelmParser.Kube.Service-1

_shadow_component(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service)

kube_service(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2) ==
KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service

namespace(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service) ==
or(namespace,default)

name(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-2/kube_service) ==
node-app1-svc

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service !=
KubernetesParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service !=
HelmParser.Kube.Service-2

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service !=
HelmParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service !=
KubernetesParser.Kube.Service-1

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service !=
HelmParser.Kube.Service-1

_shadow_component(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service)

kube_service(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3) ==
KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service

namespace(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service) ==
or(namespace,default)

name(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-3/kube_service) ==
node-app2-svc

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service !=
KubernetesParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service !=
HelmParser.Kube.Service-2

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service !=
HelmParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service !=
KubernetesParser.Kube.Service-1

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service !=
HelmParser.Kube.Service-1

_shadow_component(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service)

kube_service(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0) ==
KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service

namespace(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service) ==
or(namespace,default)

name(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-0/kube_service) ==
node-app1-svc

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service !=
KubernetesParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service !=
HelmParser.Kube.Service-2

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service !=
HelmParser.Kube.Service-0

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service !=
KubernetesParser.Kube.Service-1

KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service !=
HelmParser.Kube.Service-1

_shadow_component(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service)

kube_service(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1) ==
KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service

namespace(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service) ==
or(namespace,default)

name(KubernetesParser.Kube.Ingress.Rule.HttpPath.Backend-1/kube_service) ==
node-app-svc

KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service !=
KubernetesParser.Kube.Service-0

KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service !=
HelmParser.Kube.Service-2

KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service !=
HelmParser.Kube.Service-0

KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service !=
KubernetesParser.Kube.Service-1

KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service !=
HelmParser.Kube.Service-1

_shadow_component(KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service)

kube_service(KubernetesParser.Kube.Ingress.DefaultBackend-1) ==
KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service

namespace(KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service) ==
namespace(Config.ManifestSet.Instantiation-0)

name(KubernetesParser.Kube.Ingress.DefaultBackend-1/kube_service) ==
test2

KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service !=
KubernetesParser.Kube.Service-0

KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service !=
HelmParser.Kube.Service-2

KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service !=
HelmParser.Kube.Service-0

KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service !=
KubernetesParser.Kube.Service-1

KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service !=
HelmParser.Kube.Service-1

_shadow_component(KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service)

kube_service(KubernetesParser.Kube.Ingress.DefaultBackend-0) ==
KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service

namespace(KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service) ==
default

name(KubernetesParser.Kube.Ingress.DefaultBackend-0/kube_service) ==
nginx-ingress-controller

KubernetesParser.Kube.Ingress-2/default_backend/kube_service !=
KubernetesParser.Kube.Service-0

KubernetesParser.Kube.Ingress-2/default_backend/kube_service !=
HelmParser.Kube.Service-2

KubernetesParser.Kube.Ingress-2/default_backend/kube_service !=
HelmParser.Kube.Service-0

KubernetesParser.Kube.Ingress-2/default_backend/kube_service !=
KubernetesParser.Kube.Service-1

KubernetesParser.Kube.Ingress-2/default_backend/kube_service !=
HelmParser.Kube.Service-1

_shadow_component(KubernetesParser.Kube.Ingress-2/default_backend/kube_service)

kube_service(KubernetesParser.Kube.Ingress-2/default_backend) ==
KubernetesParser.Kube.Ingress-2/default_backend/kube_service

namespace(KubernetesParser.Kube.Ingress-2/default_backend/kube_service) ==
namespace(Config.ManifestSet.Instantiation-0)

url(HelmParser.Kube.StatefulSet-0/stable_network_id) ==
redis-master-0.redis-headless.default.?

url(HelmParser.Kube.StatefulSet-1/stable_network_id) ==
redis-replicas-{0..2}.redis-headless.default.?


